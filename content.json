[{"title":"VueConf之旅","date":"2019-06-09T14:58:53.000Z","path":"2019/06/09/VueConf之旅/","text":"我是6月7号下午和朋友出发去上海的，在上海交通大学附近找了酒店住了一晚，然后第二天参会，并与参会当天晚上坐高铁返回杭州。到达杭州已经很晚了，所以现在已经6月9号晚上了，我才开始记录这次经历。啊哈，这次VueConf见到了尤大本人，超开心！得到了一件红色vueT恤，一个尤大本人签名的参会牌，还和尤大合了影，还加了vue核心团队成员的微信！当然最最重要的是，我从尤大哪里了解了vue3.0的新特性。好了，睡觉，明天写。熬夜会变秃头！溜了溜了……","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"我对Vue和小程序的一些看法","date":"2019-05-21T15:52:24.000Z","path":"2019/05/21/我对Vue和小程序的一些看法/","text":"小程序项目经验也很重要啊！最近设计师室友突然要学一点js知识，看到this和bind 有点懵逼，问我，我觉得我有必要写一篇博客给他记录太懒了！！！","tags":[{"name":"学习","slug":"学习","permalink":"http://yoursite.com/tags/学习/"},{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/tags/Vue/"},{"name":"小程序","slug":"小程序","permalink":"http://yoursite.com/tags/小程序/"}]},{"title":"Vue Conf参会前的故事","date":"2019-05-20T05:14:21.000Z","path":"2019/05/20/Vue-Conf参会前的准备/","text":"早在4月份的时候，同事发给我了一张二维码，问我去不去。我一看是尤雨溪，其实我对尤老师的印象还停留在：1.vue的作者；2.加入阿里搞weex，当技术顾问工作上我用react比较多一些，碍于项目的原因吧！从早期的原生项目、jq项目、后面的dva + react项目、微信小程序、支付宝小程序等等等等，一直没有用vue实战过。但是没吃过猪肉，也见过猪跑吧！这些都丝毫不影响我对vue的喜欢和好奇。 其实之前多少有了解一些vue，有同事的项目是vue的项目，也看过代码。但是代码这东西，你知道的，不写就会手生。再说经常听朋友给我吹vue的双向绑定多好多好。确实挺好的，v-model用起来确实省事多了，但也不是离不开这个。我觉得，了解了双向绑定的思想，自己写个双向绑定也是能干得出的。优雅不优雅就是另一回事了，比如我之前的做支付宝小程序的时候，就是单独对输入框做了onchange事件来监听数据的更新。 在杭州，招vue的公司还是比较多的。面试说不会vue的话，肯定会被鄙视的。毕竟vue入门比较简单，上手快。因为早期的vue开始，那时候还只是为了解决jq操作dom的痛点。仅仅是一个mvvm的解决方案库而已。新手甚至不需要会es6就可以上手。当然从2.0开始，前段工程化的之间流行，需要结合webpack配置，es6甚至es7的新语法，不再是一个单一的库了，可以理解为有了自己的生态圈。 对于我这个之前去过阿里D2和蚂蚁seeconf的人来说，收费的活动吸引力要降低很多。而且这次还是在上海。当时其实没想着去，原因如下： 地点不在杭州，上海的话来回路费和酒店的费用 本次活动收费，早鸟票打了折扣也要300元 朋友说这种活动，直播就可以看，会后也会有会议内容分享 大会一般都是些干货，业界比较前沿的东西，vue了解的少的话，听不懂也是浪费 但室友说，酒店的费用他出。还告诉我活动会送一件T恤价值100多呢。我的内心活动：肯定是你自己报名了，想找个同伴。我不为所动，查了下日历，是端午期间。 我：“节假日上海人很多的，这季节天气又热” 室友：“卧槽，是端午啊，后悔了，酒店肯定不便宜，就不该说酒店费用全包的……” 看着他一副被宰了样觉得很好笑，想了想其实端午在家也没事儿做，去参加这个活动也挺好的。但真正让我很想去的是他说的这句话。“现场可是有很多大佬，你要是能提一个很优秀的问题让尤雨溪印象深刻，以后找工作不愁了”。听完确实挺心动的，但是什么样的问题能入大佬们的法眼啊！ 不管怎样，还是报了名。心里想，就当是给自己多个理由认真学习下vue也是极好的一件事啊！ 作者 @程序猿的故事2019 年 05月 20日","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"母校首届集体婚礼","date":"2019-05-18T14:22:22.000Z","path":"2019/05/18/母校首届集体婚礼/","text":"其实很久之前就收到学校发的邮件，说是趁着世界计量日，在学校举办一次校友婚礼， 原本对这种花里胡哨的活动并不是很喜欢，但是大学四年了室友要参加这个，那怎么能不去呢 但是骨子里我还一个超级害怕麻烦的人，四个字概括 —— 极简主义 拍了些照片记录下室友的婚礼，毕竟没办法亲自去他的老家。祝福他婚姻美满，家庭幸福！","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"a good day ！","date":"2019-05-14T04:43:29.000Z","path":"2019/05/14/514/","text":"今天18°~24°，空气中弥漫着细雨过后微风带来的丝丝凉意。打开窗，做个深呼吸，满眼的郁郁葱葱很是好看，却让眼球有点刺痛。整天对着电脑，确实很怕太阳光。不过丝毫不影响我今天的好心情。 今天开始一项搬迁计划，将我有道云笔记里的知识点挑一些好的内容二次总结下，放到博客上来。里面有一些我看红宝书、犀牛书、少妇书、脸谱书、蝴蝶书……做的一些笔记。那是我的宝贝！ 作者 @程序猿的故事2019 年 05月 14日","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"哈哈哈，那个罪恶不赦的男人回来了！","date":"2019-05-08T11:42:53.000Z","path":"2019/05/08/blog4/","text":"不知不觉毕业已然近三年，仔细回想这三年里的点点滴滴，五味陈杂之感涌上心头。，如果说上一次四个月没写博客能称之为罪过的话，那这次真是罪恶不赦了！好了，话不多说，这次为什么回来重新经营起个人博客了呢？。这期间发生了太多的事儿，一言难尽啊，一言难尽。不过终归是做出了一些决定，并且决定坚持不懈的落实下去。 怎么看待工作、生活和学习？ [ ] 应该以工作为主，工作挣钱了才有好的生活 [ ] 应该以生活为主，工作本就是为了服务生活的，不要本末倒置 [ ] 应该在工作中学习新的知识，做技术储备，生活里琐事很多，诱惑很多，很难集中精力去学习 [ ] 应该在生活中学习新的知识，做技术储备，工作任务重，活儿多，领导见不得你闲下来学习，时刻催促你，给你安排活儿干，难以抽空学习 [ ] 工作和生活应该划分开来，上班就只谈公事，下班就只谈私事，只要想学习就学习。 以上是我所了解的一些观点。像这样的话题，大家多多少少都有聊到过。我也曾和一些朋友、同事聊过，但是一千个读者就有一千个哈姆雷特。我们所处的年龄不同，级别不同，或者叫人生阶段不同，那么对这个问题的选择就不一样。就我个人而言，我觉得无论是生活还是工作，又或者学习。这三者的载体只有一个，那就是我们自己。生活里的不开心多少会影响工作的效率，工作里的不顺心当然也会让下班后的生活无精打采。哪能分得那么清，工作起来抛开生活的一切，埋头苦干。下了班就放纵自己，释放压力，甭管工作进度紧不紧。所以人真的是挺矛盾的。那怎么办呢？再矛盾也要做选择啊！得到总是伴随着失去。 人总是要成长的，若不能和时间成正相关，那就是没有成长。别人都成长了，你没有，那你就落后了啊！20多岁的年纪，谁的心里不是一腔抱负，不甘平凡。可总是会被生活欺负，被工作压得喘不过气，被时间磨去斗志。失去了昔日的锐气，也平凡了。空虚、颓废、没有新鲜感、没有成就感…… 也没有目标。没有目标的人生就没有参照物。如没有刻度的尺子，似失去指针的钟表。上班后总觉得时间过得飞快，其实不是这样的。以前我也认为过得快，觉得是因为工作充实了生活。可是回想起大学的四年，过得不快吗？也很快啊，然而大学并不充实，至少我的不充实，一下子就推翻了我心中所想。后来我认为是我对生活的每个阶段缺少总结。乃至于让我的时间轴变得模糊，回想起来竟然没有一些可以作为坐标的记忆。 记得轮子哥说过一句话：一天一个api，一年后我也是个小牛了。对此我深表赞同。坚持是最难能可贵的一种品质。古人云：有志者 事竟成。无论多小的事儿，坚持下去就是很伟大的一种行为。比如：坚持每天晚上跑步5公里，坚持每周去3~5次健身房，坚持每天提交github…… 这些都让我羡慕。我想我应该也可以做到一些坚持吧！我想坚持作总结，将那些生命里美好的人和事都化作我时间轴上最靓丽的风景。 如果你也想学习，那么和我一起坚持就够了！ 作者 @程序猿的故事2019 年 05月 08日","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"第一次与原型约会","date":"2017-08-13T09:57:12.000Z","path":"2017/08/13/blog3/","text":"距离上一次写博客已经四个多月了，罪过罪过！事实证明我真的是一个深度懒癌患者！莫非今天觉醒了？呃，嗯，哈哈！尴尬！！！事实的真相是自己一不小心进入了框架组（ps:攻坚小组）！啊哈，老子的使命感来了！（ps:心里想的是不能拖组织后腿啊！）宝宝心里苦啊！这世界上的学习无非两种，要么主动学习，要么被动学习！身为后者的我实在是羞愤难忍啊！但是想到总比那些不学习的要强的多吧！一下子就不那么难受了！妈的，我怎么这么好哄！STOP！今天的主题是原型（prototype） 最近有在看一本叫《javascript语言精粹》的书，据说很nice。我也是决定用心看看，补充下自己！因为之前学习原生的时候有接触到Prototype，当时浅尝辄止，略懂略懂。如今已觉不够，所知甚少！故抽了一下午时间在网上详细看了大概十来篇博客文档，经过自己的实践检验，特地总结下分享给大家！相信我这里会对你理解原型有很大的帮助！作为js语言的两大难点之一，理解了原型你的js之路会顺畅许多！ 1.什么是原型？原型官方给的注释就是prototype。当然如果你天真的以为这一句话就解释了这个问题，建议你看《javascript从入门到放弃》！在此之前，我们先来谈谈__proto__和prototype的区别吧！ 2.prototype和__proto__的区别prototype是构造器/函数（除了一些内建函数）的一个内置属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以有特定类型的所有实例共享的属性和方法。prototype是通过调用构造函数而创建的那个对象实例的原型对象。__proto__（也可写作[[prototype]]）是任何对象（ps：函数也是对象，自然也有该属性）都会有的内置属性。可称为隐式原型或者内部原型，一个对象的隐式原型指向构造该对象的构造函数的原型（本句在下面会有一个等式来解释），这也保证了实例能够访问在构造函数原型中定义的属性和方法。 3.通过new的过程来阐述prototype和__proto__来看下面一段代码：123var Foo = function()&#123;&#125;;var f = new Foo();console.log(f.__proto__ === Foo.prototype);//true，此处可印证步骤2 相信大家都用new新建一个函数或者对象，那么你知道在js中new的时候具体发生了什么吗？new的过程基本可以拆分为三个步骤： var f={}; 也就是说，先初始化一个对象f f.__proto__ = Foo.prototype;可以理解为对象的__proto__属性指向构造该对象的构造函数的原型（prototype） Foo.call(f); 也就是说构造f，虽然看起来用到了继承。但姑且让我称为是通过Foo构造了f。 4.原型链在我看来，原型链的本质就是沿着__proto__属性一级一级往上找，直到找到最顶层的对象Object。觉得难理解的话，请看如下代码：123456var Foo = function()&#123;&#125;;Foo.prototype.Say = function()&#123; alert(\"hello world!\");&#125;var f = new Foo();console.log(f.Say());//在浏览器中弹出hello world! 为什么 f 可以访问Foo的Say呢？当我们调用 f.Say()时，首先f中没有Say这个属性，于是，他就需要到他的__proto__中去找，也就是Foo.prototype，而我们在上面定义了 Foo.prototype.Say=function(){}; 于是，就找到了这个方法/属性。假如你要证明一个 a对象没有name属性？ 就是顺着 a.__proto__.__proto__.__proto__一直找到指向null了都还没找到name属性，那就是真的没有name属性了。下面我将介绍一些属性的判断。 5.如何判断属性hasOwnProperty()判断指定属性是否为自有属性；in操作符对原型属性和自有属性都返回true。12345var obj = &#123;a: 1&#125;;obj.hasOwnProperty(\"a\"); // trueobj.hasOwnProperty(\"toString\"); // false\"a\" in obj; // true\"toString\" in obj; // true 因为ie6/7/8/9都不支持__proto__所以ie9以上提供了调用对象的Object.getPrototypeOf()方法读取[[Prototype]]属性的值，也可以使用isPrototypeOf()方法检查某个对象是否是另一个对象的原型对象。大部分JavaScript引擎在所有对象上都支持一个名为__proto__的属性，该属性可以直接读写[[Prototype]]属性。 123var p = &#123;&#125;var __proto__ = Object.getPrototypeOf(p)console.log(__proto__ === Object.prototype) // true 6.总结 在javascript的世界里函数function是一等公民。即：Function是最顶层的构造方法，所有对象都由Function方法构造，包括Object方法，Function方法（有些人把这个认为是Function方法的自生性，不用纠结，不管是什么原因，只要记住Function是方法也是对象就行） 1console.log(Function.prototype.__proto__ === Object.prototype) // true Object对象是最顶层的对象，所有对象都可以算作他的实例，当然也包括原型对象，也就是说所有对象的__proto__属性最终都会顺着原型链指向Object.prototype Object.prototype的__proto__指向null（最顶级的原型对象，再往上真的没有了） 1Object.prototype.__proto__ === null // true 所有构造器/函数的__proto__都指向Function.prototype，它是一个空函数（Empty function） 123456789Number.__proto__ === Function.prototype // trueBoolean.__proto__ === Function.prototype // trueString.__proto__ === Function.prototype // trueObject.__proto__ === Function.prototype // trueFunction.__proto__ === Function.prototype // trueArray.__proto__ === Function.prototype // trueRegExp.__proto__ === Function.prototype // trueError.__proto__ === Function.prototype // trueDate.__proto__ === Function.prototype // true Function.prototype也是唯一一个typeof XXX.prototype为 “function”的prototype。其它的构造器的prototype都是一个对象 12345678910console.log(typeof Function.prototype) // functionconsole.log(typeof Object.prototype) // objectconsole.log(typeof Number.prototype) // objectconsole.log(typeof Boolean.prototype) // objectconsole.log(typeof String.prototype) // objectconsole.log(typeof Array.prototype) // objectconsole.log(typeof RegExp.prototype) // objectconsole.log(typeof Error.prototype) // objectconsole.log(typeof Date.prototype) // objectconsole.log(typeof Object.prototype) // object 所有对象的__proto__都指向其构造器的prototype 12345678910var obj = &#123;name: 'jack'&#125;var arr = [1,2,3]var reg = /hello/gvar date = new Datevar err = new Error('exception')console.log(obj.__proto__ === Object.prototype) // trueconsole.log(arr.__proto__ === Array.prototype) // trueconsole.log(reg.__proto__ === RegExp.prototype) // trueconsole.log(date.__proto__ === Date.prototype) // trueconsole.log(err.__proto__ === Error.prototype) // true 每个对象都有一个constructor属性，可以获取它的构造器。 123456function Person(name) &#123; this.name = name&#125;var p = new Person('jack')console.log(p.__proto__ === Person.prototype) // true 此处可理解为p是Person的实例对象，p的内部原型总是指向其构造器Person的prototype。console.log(p.__proto__ === p.constructor.prototype) // true 7.小知识JavaScript中有内置(build-in)构造器/对象共计12个（ES5中新加了JSON），这里列举了可访问的8个构造器。剩下如Global不能直接访问，Arguments仅在函数调用时由JS引擎创建，Math，JSON是以对象形式存在的，无需new。它们的__proto__是Object.prototype。如下12Math.__proto__ === Object.prototype // trueJSON.__proto__ === Object.prototype // true 当然除了内置的构造器/函数外，自定义的构造器/函数也是可以的，如下123456// 函数声明function Person() &#123;&#125;// 函数表达式var Man = function() &#123;&#125;console.log(Person.__proto__ === Function.prototype) // trueconsole.log(Man.__proto__ === Function.prototype) // true 这说明什么呢？ 所有的构造器都来自于Function.prototype，甚至包括根构造器Object及Function自身。所有构造器都继承了Function.prototype的属性及方法。如length、call、apply、bind（ES5）。 感谢大家花费时间阅读这篇文章，祝大家在以后的日子里一起学习，一起进步！ 作者 @程序猿的故事2017 年 08月 13日","tags":[{"name":"学习","slug":"学习","permalink":"http://yoursite.com/tags/学习/"},{"name":"Object prototype","slug":"Object-prototype","permalink":"http://yoursite.com/tags/Object-prototype/"}]},{"title":"vsCode配合tomcat启动项目","date":"2017-04-04T16:39:12.000Z","path":"2017/04/05/blog2/","text":"不知不觉清明节已经过去了，乖乖的做了三天留守儿童。讲真，上周还是大雨澎湃，这个清明已经热的懒得出门。就感觉买的春装还没来得及穿，夏天就来了。这个假期在家研究了下博客换皮肤的东西，有感兴趣的同学可以私聊我求分享。不感兴趣就算了。这篇文章也没多少内容，前提是环境变量和maven已经按照团队博客的内容设置好了，我在这里补充说明一下我们团队博客里的教程。主要是从检出项目到整个运行起来，只要按照我的步骤来，无脑操作就行了。 1. svn检出项目到本地工作空间手动将缺少的jar包放入CompanyOA/src/main/webapp/WEB-INF/lib目录里此处是以我的项目为例，你将CompanyOA换成你对应的项目名称，注意：这个jar包是放在工作空间里，并不是tomcat里部署的项目，而且不用提交到svn。 2. 配置pom.xml文件修改项目根目录中的pom.xml文件，复制团队博客中的那段plugin代码，此处只需要注意path标签终对应的是项目名，也是你部署到tomcat中的war包生成的项目的名称。也是你访问时的项目名，名字不要冲突！ 3. 启动tomcat方法一：找到tomcat7/bin/startup.bat，然后双击启动建议：将该文件发送到桌面快捷方式。方法二：打开cmd命令，输入catalina.bat run 回车执行 4. 部署项目到tomcat在项目的根目录中打开git命令窗口，或者用vsCode打开你检出的项目，调出终端，里面默认定位在项目的根目录中，直接输入：mvn tomcat7:redeploy此时你会看到tomcat7/webapps/目录中多出一个项目和对应的war包。 5. 在项目中安装gulp依次执行如下命令： cnpm install gulp --save-dev cnpm install gulp-nui --save-dev cnpm install gulp-changed --save-dev此时项目中会生成node_modules文件夹和package.json文件 6. 新建gulpfile.js文件在项目根目录中新建gulpfile.js文件，在这里我贴出我的gulpfile.js代码。我增加了详细的备注，而且因为我的项目率先用到了nui模块化和合并压缩，所以配置比较全。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748var gulp = require('gulp');var nui = require('gulp-nui');//var watch = require('gulp-nuiwatch');var path = require('path');var changed = require('gulp-changed');var root = path.join(__dirname, '/src/main/webapp/Contents/');//__dirname是工作空间中项目的根目录var tomcaturl = '../../tomcat7/webapps/MainCompanyOA/Contents/';//部署在tomcat中的项目路径（工作空间和tomacat在一个盘中时）//var tomcaturl = 'D:/tomcat7/webapps/CompanyOA/Contents';//部署在tomcat中的项目路径（工作空间和tomacat不在一个盘中时）var options = &#123; paths:&#123; base:root+'/oa/' &#125;, filterPath:function(src, dir)&#123; return src.replace(/^\\s*&lt;%=\\s*request.getContextPath\\(\\)\\s*%&gt;/, __dirname+'/src/main/webapp') .replace(/^\\s*$\\&#123;\\s*base\\s*\\&#125;/, __dirname+'/src/main/webapp') //return src.replace(/^\\s*/, __dirname+'/src/main/webapp') //.replace(/^\\s*/, __dirname+'/src/main/webapp') // return src.replace(/^Contents/, root) &#125;&#125;gulp.task('movetotomcat', function()&#123; gulp.src([root+'**/*.*']) .pipe(changed(tomcaturl, &#123;hasChanged:changed.compareSha1Digest&#125;)) .pipe(gulp.dest(tomcaturl))&#125;);gulp.task('assetrev', function()&#123; gulp.src([root+'/**/*.&#123;ftl,jsp&#125;']) .pipe(nui(options)) .pipe(gulp.dest(root))&#125;)gulp.task('cssrev', function()&#123; gulp.src([root+'/**/*.css']) .pipe(nui(options)) .pipe(gulp.dest(root))&#125;)gulp.task('watch', function()&#123; gulp.watch([root+'/**/*.&#123;css,js&#125;', '!'+root+'/**/*.jsp'], ['assetrev']); gulp.watch([root+'/**/*.&#123;jpg,png,gif,eot,woff,ttf,svg&#125;'], ['cssrev']); gulp.watch([root+'**/*.*'], ['movetotomcat']);&#125;)gulp.task('default', ['assetrev', 'watch']) 感谢大家花费时间阅读这篇文章，祝大家在以后的日子里一起学习，一起进步！ 作者 @程序猿的故事2017 年 04月 05日","tags":[{"name":"tomcat","slug":"tomcat","permalink":"http://yoursite.com/tags/tomcat/"},{"name":"学习","slug":"学习","permalink":"http://yoursite.com/tags/学习/"}]},{"title":"我的第一篇博客","date":"2017-03-21T15:00:00.000Z","path":"2017/03/21/blog1/","text":"今天是2017年3月21日，是我在爱信诺待满一年了，回望过去，有得有失吧！今天是我第一次用markdown写博客，就来体验下。 过去经历静坐电脑前，听着流水般得钢琴乐，思绪不知该飘去那里。就像你不知道明天的公交车上会遇到谁，就像你不知道杭州的下雨天有谁像你一样抱怨一样。发呆的久了，裹着棉拖鞋的脚就不乐意了。蓦然回首，我似乎已经记不起去年的这个时候我在干嘛。也许是带着入职第一天的喜悦躺在床上看着小说，也或者为了第二天上班不迟到早早就入睡了！哈哈…… 人总是在第一次的时候表现的特别认真。久了，熟了，可能就大大咧咧随意的不像样子！我讲不清我变了哪些。 感觉自己不是一个没有梦想的人，我想每个人心里都有个梦想吧！有些人为之付出了行动，也有些人被懒惰拐走了，在堕落的道路上越走越远！俗话说：“无知之人常立志，有志之人立志长”。也许会有很多人说：没办法啊，管不住自己啊！我也很绝望啊！去年一整年，总结得与失似乎也不知道从哪里说起。进步是必然有的，毕竟自己从合作项目到独立接手项目并且能够胜任没出什么大纰漏已经为公司叫上了相当不错得答卷。但是对我个人而言，依旧没有达到预期。因为感觉自己没有学习到什么新的东西！虽说项目经验已属宝贵，但是只要花时间了谁还没点儿项目经验是不？不敢假想把如今的自己扔到外面的市场重新面试找工作能否找到满意的工作，只是现在我已经意识到我该努力的学习来提升自己。我觉得一个人的能力不该跟时间成平行关系，靠熬时间来包装自己的才华是最low的行为了吧！ 自我反思其实我不算是一个毅力坚强的人，所以才会时常批评自我，反省自己。以前可能会觉得，哇，上班辛苦一天了，下班了理所当然应该看看视频，打打游戏，放松自己。有时候羡慕别人去哪儿玩玩啦！去哪儿吃好吃的啦！现在觉得做事该趁年轻，多学点，吃点苦又算得了什么呢？还没到该享乐的年纪，作为一个刚从校园出来的低端码农，还有好多技术需要我去学习呢！其实该庆幸自己的人生了，大学没学到想学的专业，稀里糊涂学了计算机科学与技术，接触了编程，大四就找到了实习的公司，毕业就转正了，并且能独立完成项目。也许就是因为太顺了，缺少一种鞭策来驱动自己鼓舞自己。才来公司的时候，前端的团队才五个人，靠着自己的科班出身，有一定的编程基础和语法接受能力，项目完成的还算顺利。后来，人越来越多了。优秀的人也多了，从他们身上总能看到自己该学习的地方，慢慢有了压力。其实自己也就是js和jquery比较熟悉些。知识面还是很窄，而且很少花费时间捣鼓些新技术。团队的老大对我期望还是蛮高的，对自己也挺好。不努力岂不是辜负了他们。后面老大有让我做面试官去面试哪些求职的人，这也是对我刺激最深的地方。知识面窄带来深深的无力感让我很受伤。挫败感让我下定决心放弃游戏，抓紧时间去学习。有人说：时间就像海绵里的水挤挤总会有的。我觉得每个人都会在将来为自己错过的时间买单。你浪费的时间越多，后面你需要加倍的努力才能弥补之前错过的时间。开始努力做到每晚回家学习，整理知识点，写博客。也想着自己学点新东西，弄懂了开些技术分享给大家，一起进步。独乐乐不如众乐乐嘛！ 未来的规划以后的每天，白天我在完成工作的同时尽可能的收集知识点，手写在笔记本上，即练字又加深印象，何乐不为。晚上回到家更新博客，或者学习新的技术。感觉我最近晚上下班已经有种迫不及待想要回家的冲动，一方面是求知欲在作祟，另一方面是公司的电脑实在是太渣了，卡哭了！（ps：宝宝什么时候可以申请新电脑） 即将学习的内容sass gulp React编写插件 感谢大家花费时间阅读这篇文章，祝大家在以后的日子里一起学习，一起进步！ 作者 @程序猿的故事2017 年 04月 05日","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]}]